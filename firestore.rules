rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isManager() {
        return isAuth() && getUserData().cmmsRole == 'GESTOR';
    }

    function isTechnician() {
        return isAuth() && getUserData().cmmsRole == 'TECNICO';
    }

    function isClientUser() {
        return isAuth() && ['SINDICO', 'ZELADOR', 'PORTEIRO', 'GERENTE_PREDIAL'].hasAny([getUserData().cmmsRole]);
    }
    
    function isOwner(clientId) {
      return isAuth() && getUserData().clientId == clientId;
    }

    function isAssetOwner(assetId) {
        let assetData = get(/databases/$(database)/documents/assets/$(assetId)).data;
        let userLocations = get(/databases/$(database)/documents/customerLocations).where('clientId', '==', getUserData().clientId);
        // This is a simplification. In a real scenario, you'd check if the user belongs to the location.
        // For now, we assume a client user can see all assets from their parent company.
        return assetData.clientId == getUserData().clientId;
    }

    // --- Default Rule ---
    // Deny all access by default
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Admin Rules ---
    // Admins have full access to everything.
    match /users/{userId} {
       allow read, write: if isAdmin();
    }
     match /companies/{companyId} {
       allow read, write: if isAdmin();
    }
     match /segments/{segmentId} {
       allow read, write: if isAdmin();
    }
    match /cmmsRoles/{roleId} {
       allow read, write: if isAdmin();
    }
     match /customerLocations/{locationId} {
       allow read, write: if isAdmin() || (isManager() && isOwner(resource.data.clientId));
    }
     match /assets/{assetId} {
       allow read, write: if isAdmin() || (isManager() && isOwner(resource.data.clientId));
       allow read: if isTechnician() && isOwner(resource.data.clientId);
    }
    match /workOrders/{orderId} {
       allow read, write: if isAdmin() || (isManager() && isOwner(resource.data.clientId));
       allow read: if isTechnician() && isOwner(resource.data.clientId);
       allow update: if isTechnician() && request.auth.uid == resource.data.responsibleId;
       allow create: if isClientUser() && request.auth.uid == request.resource.data.createdByUserId;
       allow read, update: if isClientUser() && isAssetOwner(resource.data.assetId);
    }
     match /products/{productId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /suppliers/{supplierId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /purchaseOrders/{poId} {
       allow read, write: if isAdmin() || isManager();
    }
     match /contracts/{contractId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /checklistTemplates/{templateId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /accountsPayable/{apId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /accountsReceivable/{arId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /bankAccounts/{baId} {
       allow read, write: if isAdmin() || isManager();
    }
    match /schedules/{scheduleId} {
        allow read, write: if isAdmin() || isManager();
    }
  }
}
